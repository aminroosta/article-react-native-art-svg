import React from 'react';
import { StyleSheet, Text, ART, View } from 'react-native';

const {
  Surface,
  Shape,
  Group,
  Path,
  ClippingRectangle,
  LinearGradient,
  RadialGradient,
  Pattern,
  Transform
} = ART;

class Circle extends React.Component {
  render() {
    const {radius, ...rest} = this.props

    const circle = Path()
      .move(radius, 0)
      .arc(0, radius * 2, radius)
      .arc(0, radius * -2, radius);

    return <Shape {...rest} d={circle} />
  }
}

// const IconBuilder = (path, defaultSize) => (props) => {
// 	const segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;
// 	const number = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;
// 	const {size = 18, fill = "#f0AFF8"} = props;
//
// 	const d = path.replace(segment, (_, cmd, args) => {
// 		let numbers = args.match(number) || [];
// 		return cmd + numbers.map(n => n * size/defaultSize).join(' ');
// 	});
//
// 	return (
// 		<Surface width={size} height={size}>
// 			<Shape fill={fill} d={d} />
// 		</Surface>
// 	);
// };
//
// //const PlusIcon = IconBuilder("M4 6v4h2V6h4V4H6V0H4v4H0v2h4z", 10);
// const StarStrokedIcon = IconBuilder("M3.859 18.47l1.782-1.804-.036.208 3.513-1.827.923-.48.923.48 3.513 1.827-.665-3.839-.182-1.045.764-.736 2.799-2.7-3.101-.445 1.747-1.77 1.729.25c2.184.313 2.667 1.81 1.076 3.345l-2.862 2.76.672 3.875c.377 2.178-.91 3.115-2.865 2.097l-3.548-1.845-3.548 1.845c-1.219.634-2.175.511-2.634-.196zm.266-5.944L1.437 9.934C-.153 8.4.33 6.902 2.514 6.588l3.979-.572L8.256 2.48c.986-1.975 2.586-1.972 3.569 0l.746 1.495-1.485 1.504-1.045-2.095-1.759 3.525-.468.938-1.037.149-3.888.559 2.642 2.548-1.406 1.423zM17.12.793l1.397 1.414-16.761 16.97-1.397-1.414L17.12.793z", 20);
// const SearchIcon = IconBuilder("M2.042 6.891a4.85 4.85 0 1 1 9.698 0 4.85 4.85 0 0 1-9.698 0zM18 16.556l-5.574-5.573a6.847 6.847 0 0 0 1.356-4.092 6.891 6.891 0 1 0-6.89 6.891 6.847 6.847 0 0 0 4.09-1.356L16.557 18 18 16.556z", 18);
// const TripsIcon = IconBuilder("M11.138 20.325c.23.307.466.612.703.914-1.59 1.938-2.905 3.261-2.905 3.261S.5 16.02.5 10.498 4.277.5 8.936.5c.826 0 1.623.147 2.378.41a9.852 9.852 0 0 0-2.01 1.878c-.122-.009-.244-.023-.368-.023-3.612 0-6.535 3.465-6.535 7.733 0 .84.378 2.053 1.121 3.497.65 1.264 1.542 2.638 2.613 4.065a50.208 50.208 0 0 0 2.781 3.375l.02.021.02-.021a53.233 53.233 0 0 0 1.613-1.895c.187.26.371.521.569.785m7.727-2.265a50.208 50.208 0 0 1-2.781 3.375l-.02.021-.02-.021c-.95-1.059-1.899-2.2-2.78-3.375-1.071-1.427-1.963-2.8-2.613-4.065-.743-1.444-1.121-2.657-1.121-3.497 0-4.268 2.923-7.733 6.534-7.733 3.612 0 6.535 3.465 6.535 7.733 0 .84-.378 2.053-1.121 3.497-.65 1.264-1.542 2.638-2.613 4.065M16.065.5c-4.66 0-8.436 4.476-8.436 9.998 0 5.521 8.435 14.002 8.435 14.002S24.5 16.02 24.5 10.498 20.723.5 16.064.5", 25);
// const InfoIcon = IconBuilder("M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16zm0 2C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10zM8.75 5h2.5v2.5h-2.5V5zm0 3.75h2.5V15h-2.5V8.75z", 20);
// const StarStroked2 = IconBuilder("M13.859 28.47l1.782-1.804-.036.208 3.513-1.827.923-.48.923.48 3.513 1.827-.665-3.839-.182-1.045.764-.736 2.799-2.7-3.101-.445 1.747-1.77 1.729.25c2.184.313 2.667 1.81 1.076 3.345l-2.862 2.76.672 3.875c.377 2.178-.91 3.115-2.865 2.097l-3.548-1.845-3.548 1.845c-1.219.634-2.175.511-2.634-.196zm.266-5.944l-2.688-2.592c-1.59-1.534-1.108-3.032 1.077-3.346l3.979-.572 1.763-3.536c.986-1.975 2.586-1.972 3.57 0l.745 1.495-1.485 1.504-1.045-2.095-1.759 3.525-.468.938-1.037.149-3.888.559 2.642 2.548-1.406 1.423zM27.12 10.793l1.397 1.414-16.761 16.97-1.397-1.414 16.761-16.97z", 40);

class PlusIcon extends React.Component {
  render() {
    const path = "M4 4V0h2v4h4v2H6v4H4V6H0V4h4z";
    const {fill = 'red', size = 10} = this.props;

    //regex to parse the path
  	const segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;
  	const number = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;

  	const d = path.replace(segment, (_, cmd, args) => {
  		let numbers = args.match(number) || [];
  		return cmd + numbers.map(n => n * size/10).join(' ');
  	});

  	return (
  		<Surface width={size} height={size}>
  			<Shape fill={fill} d={d} />
  		</Surface>
  	);
  }
}

class IconBuilder extends React.Component {
  scaleCommand(cmd, numbers, scaleX, scaleY) {
    if(/(M|L|H|V|Z|C|S|Q|T)/i.test(cmd)) {
      for(let idx = 0; idx < numbers.length; ++idx) {
        numbers[idx] *= idx%2 ? scaleX : scaleY;
      }
    }
    if(/A/i.test(cmd)) {
      for(let idx = 0; idx < numbers.length; ++idx) {
        if(idx%7 === 0 || idx%7 === 5) {
          numbers[idx] *= scaleY;
        }
        if(idx%7 === 1 || idx%7 === 6) {
          numbers[idx] *= scaleX;
        }
      }
    }
    return cmd + numbers.join(' ');
  }
  renderPath(path, fill, key, scaleX, scaleY) {
    const segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;
    const number = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;

    const d = path.replace(segment, (_, cmd, args) => {
      let numbers = args.match(number) || [];
      return this.scaleCommand(cmd, numbers, scaleX, scaleY);
    });
    return (<Shape key={key} fill={fill} d={d} />);
  }
  render() {
    const {paths, orgWidth, orgHeight} = this.props;
    const {width = orgWidth, height = orgHeight} = this.props;

    const scaleY = width/orgWidth,
          scaleX = height/orgHeight;
    return(
      <Surface width={width} height={height}>
        {paths.map((path, idx) =>
          this.renderPath(path.d, path.fill, idx, scaleX, scaleY)
        )}
      </Surface>
    );
  }
}

class TractorIcon extends React.Component {
  render() {
    const orgWidth = 97, orgHeight = 68;
    const {width = orgWidth, height = orgHeight} = this.props;
    return (
      <IconBuilder
        orgWidth={97}
        orgHeight={68}
        width={width}
        height={height}
        paths={[
          {fill: "#52524F", d: "M76.347 56.19a8.98 8.98 0 0 1-8.983-8.98c0-4.96 4.02-8.99 8.983-8.99 4.963 0 8.988 4.03 8.988 8.99s-4.025 8.98-8.988 8.98zm18.855-7.05v-3.65c0-.73.475-1.35 1.133-1.57a20.18 20.18 0 0 0-3.387-8.32c-.633.38-1.461.29-2.004-.25l-2.586-2.59a1.64 1.64 0 0 1-.234-2.03 20.058 20.058 0 0 0-8.324-3.48 1.653 1.653 0 0 1-1.623 1.36h-3.656c-.813 0-1.485-.59-1.624-1.36-3.074.53-5.91 1.75-8.341 3.49.461.65.402 1.55-.176 2.13l-2.586 2.58c-.566.57-1.443.64-2.084.21a20.151 20.151 0 0 0-3.365 8.36c.738.17 1.291.83 1.291 1.61v3.66c0 .76-.514 1.39-1.209 1.59a20.138 20.138 0 0 0 3.545 8.25 1.65 1.65 0 0 1 1.922.3l2.585 2.58c.499.5.612 1.24.336 1.85a20.195 20.195 0 0 0 8.317 3.35c.242-.61.836-1.04 1.531-1.04h3.654c.678 0 1.258.41 1.514.99a20.085 20.085 0 0 0 8.268-3.45c-.245-.6-.125-1.31.359-1.8l2.586-2.58c.484-.49 1.197-.6 1.795-.36A20.204 20.204 0 0 0 96.3 50.7a1.639 1.639 0 0 1-1.098-1.56z"},
          {fill:"#8E908C", d:"M76.341 43.25a3.975 3.975 0 0 0 0 7.95 3.975 3.975 0 0 0 0-7.95M11.796 53.56a2.235 2.235 0 1 0 0 4.47c1.236 0 2.24-1 2.24-2.24 0-1.23-1.004-2.23-2.24-2.23" },
          {fill:"#52524F", d:"M11.802 60.84a5.058 5.058 0 0 1-5.063-5.06c0-2.79 2.266-5.06 5.063-5.06a5.064 5.064 0 0 1 5.062 5.06c0 2.8-2.267 5.06-5.062 5.06zm-.006-16.46C5.493 44.38.384 49.49.384 55.79c0 6.31 5.109 11.42 11.412 11.42 6.305 0 11.414-5.11 11.414-11.42 0-6.3-5.109-11.41-11.414-11.41z"},
          {fill:"#D23537", d:"M73.401 18.51l.475-2.37c.592-1.87 1.326-2.64 2.523-2.65l10.452-.05h.009c1.166 0 2.02.89 2.537 2.63l.514 2.44h-16.51zm18.289 5.12c2.114.02 3.532-.08 3.532-2.44 0-2.64-1.784-2.69-4.332-2.68l-.561-2.66-.01-.04c-.81-2.74-2.324-3.32-3.459-3.32h-.013l-10.451.04c-2.122.02-2.954 1.8-3.44 3.35l-.529 2.63h-2.832s-.237.09-.657.28l1.782-7.4a2.665 2.665 0 0 0-1.961-3.21 2.656 2.656 0 0 0-3.197 1.96l-2.819 11.72c-.045.18-.066.36-.072.53-.129.09-.262.19-.393.28l-6.429-.02a2.661 2.661 0 0 0-2.664 2.65 2.658 2.658 0 0 0 2.642 2.66l.442.01c-3.465 3.83-6.358 8.89-6.782 15.28h-8.81l2.427-11.18c-.208-.6-.906-2.03-1.763-3.58l2.711-2.76 2.271 2.23a1.8 1.8 0 0 0 2.533-.02c.692-.71.68-1.84-.025-2.54l-5.82-5.71a1.8 1.8 0 0 0-2.533.02c-.696.71-.684 1.85.021 2.54l1.988 1.95-2.287 2.33c-1.131-1.84-2.289-3.4-2.885-3.4l-15.39.6V9.84c0-1.02-.633-1.89-1.529-2.25V.35h-3.354l-.797 1.14h2.342v6.1a2.425 2.425 0 0 0-1.529 2.25v14.14l-9.231.48a3.986 3.986 0 0 0-3.98 3.98l.828 14.38A14.75 14.75 0 0 1 11.796 41c3.76 0 7.187 1.4 9.797 3.71l.107.09c.049.05.094.09.141.13.035.03.07.06.105.1.047.04.092.09.139.13.031.03.066.07.098.1.046.04.091.09.138.13a9.503 9.503 0 0 1 .233.25l.088.09.138.15c.03.03.057.06.086.1l.133.15c.029.03.057.06.084.1l.133.15c.025.04.053.07.078.1.043.06.086.11.129.16.025.04.051.07.078.1.041.06.082.11.125.17.025.03.049.06.074.1.041.05.084.11.123.17.024.03.049.06.073.1.041.05.078.11.117.17.025.03.049.07.07.1.039.06.08.12.117.17.022.04.045.07.067.11.037.06.074.12.111.17.021.04.045.08.066.11l.106.18c.021.03.045.07.064.11l.102.18c.021.04.043.07.062.11.034.06.065.12.098.18l.061.12c.033.06.062.12.093.18.02.04.037.08.059.12l.088.18c.017.04.037.08.058.13.026.05.055.11.08.18l.057.12.078.18.055.14.072.18c.018.04.035.09.051.13l.068.18c.016.05.033.1.051.14l.061.18.048.15.057.17c.016.05.031.11.047.16.018.05.035.11.051.17.015.05.031.11.047.16.015.05.031.11.045.17.015.05.029.11.044.17.014.05.026.11.038.16.013.06.029.12.043.18.011.05.023.1.035.16l.037.18a3.83 3.83 0 0 1 .066.36c.01.04.018.09.026.14a5.584 5.584 0 0 1 .052.34c.016.11.032.23.047.35h27.321a23.337 23.337 0 0 1-1.016-6.82c0-1.36.117-2.69.34-3.98h-.071c1.889-11.14 11.59-19.63 23.276-19.63v-.01h.597c2.954.08 11.536.88 17.75 7.1 0 0 1.063 1.89 1.596 0 0 0 .178-3-4.594-7.08z" },
        ]}
      />
    );
  }
}

export default class App extends React.Component {
  render() {
    return (
      <View style={styles.container}>
  		  <TractorIcon height={68*2} width={97} />
  		  <TractorIcon height={68} width={97*2} />
  		  <TractorIcon height={68*.5} width={97*.5} />
  		  <TractorIcon height={68*1.5} width={97*1.5} />
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
